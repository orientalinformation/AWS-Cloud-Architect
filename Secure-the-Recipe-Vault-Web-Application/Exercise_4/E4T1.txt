# Identify 2-3 changes that can be made to our environment to prevent an ssh brute force attack from the internet.
- Implement strong password policies: Enforce the use of complex and unique passwords for SSH authentication. This can include requiring a minimum password length, a combination of uppercase and lowercase letters, numbers, and special characters. Additionally, consider implementing a password expiration policy to ensure regular password updates.
	
- Enable Multi-Factor Authentication (MFA): Implement MFA for SSH access to add an extra layer of security. MFA requires users to provide an additional authentication factor, such as a temporary code generated by a mobile app or a physical token, in addition to their password. This significantly reduces the risk of unauthorized access, even if passwords are compromised.
	
- Configure IP whitelisting: Restrict SSH access to specific trusted IP addresses or ranges. By configuring IP whitelisting, you only allow SSH connections from known and trusted sources, effectively blocking access attempts from unauthorized locations. This helps mitigate the risk of brute force attacks by limiting the attack surface to trusted networks.

# Neither instance should have had access to the secret recipes bucket, in the even that instance API credentials were compromised how could we have prevented access to sensitive data.
To prevent access to sensitive data, even in the event of compromised API credentials, there are several measures you can take:
- Implement Least Privilege Access: Ensure that the IAM policies associated with the instances are configured with the principle of least privilege. This means granting only the necessary permissions required for the instances to perform their intended tasks. By restricting access to the secret recipes bucket specifically, you can prevent unauthorized access to sensitive data.

- Use IAM Permission Boundaries: IAM permission boundaries provide an additional layer of security by defining the maximum permissions that an IAM entity (such as a user or role) can have. By setting a permission boundary that only allows access to the necessary resources, you can further restrict access to sensitive data, even if a compromised API credential is used.

- Enable Encryption: Encrypt the sensitive data stored in the secret recipes bucket using AWS Key Management Service (KMS) or another encryption mechanism. This ensures that even if unauthorized access is gained, the data remains encrypted and unreadable without the appropriate decryption keys.

- Implement Access Controls: Utilize AWS Identity and Access Management (IAM) policies and bucket policies to enforce access controls. These policies can specify who has access to the bucket and what actions they can perform. By carefully configuring these policies, you can limit access to only authorized users or roles.

- Monitor and Audit: Implement logging and monitoring mechanisms to track access and detect any unauthorized attempts to access the secret recipes bucket. By regularly reviewing logs and conducting audits, you can identify and respond to any suspicious activity promptly.
By implementing these measures, you can significantly reduce the risk of unauthorized access to sensitive data, even in the event of compromised API credentials.