Based on the mentioned architecture diagram and the steps taken so far, here are two obvious poor practices related to security and their justifications:

- IAM Role with overly permissive access rights:
	+ The IAM Role assigned to the instances in this project, called InstanceRole, has been granted extensive permissions to access S3 buckets. This role has been given full access to any S3 bucket instance. This means that the instances associated with this role can perform all actions on the S3 buckets, including reading, writing, and deleting objects.
    	+ By granting full access to the S3 buckets, the InstanceRole has elevated privileges, which can pose security risks if not properly managed. It is important to regularly review and audit the permissions assigned to this role to ensure that it only has the necessary permissions required for the project. Unnecessary or excessive permissions can potentially lead to unauthorized access or data breaches.
    	+ It is recommended to follow the principle of least privilege when assigning permissions to IAM roles. This means granting only the minimum set of permissions required for the role to perform its intended tasks. Regularly reviewing and updating the permissions assigned to the InstanceRole will help maintain a secure environment and minimize the risk of unauthorized access.

- Security group rules that are excessively permissive:
	+ Security group rules that are excessively permissive can pose significant risks to the security of your infrastructure. The WebApp security group, which allows ingress traffic from the internet to multiple ports, including ports 22 (SSH), 5000, and 80 (HTTP).
	+ By allowing inbound traffic on port 22 (SSH), the security group opens up the possibility of unauthorized access to the instances running the web application. SSH is a commonly used protocol for remote administration, and leaving it open to the internet without proper restrictions can expose your infrastructure to brute-force attacks and unauthorized login attempts.
	+ Similarly, allowing inbound traffic on port 5000 and port 80 can introduce additional security risks. Port 5000 is often used for application-specific services, and leaving it open to the internet without proper restrictions can potentially expose sensitive data or allow unauthorized access to the application's backend. Port 80 is commonly used for HTTP traffic, and allowing unrestricted access to this port can make your web application vulnerable to various types of attacks, such as cross-site scripting (XSS) or SQL injection.
	+ To mitigate the risks associated with excessively permissive security group rules, it is crucial to follow the principle of least privilege. This means that you should only allow inbound traffic from trusted sources and restrict access to the necessary ports and protocols. By implementing more granular rules, such as allowing access only from specific IP ranges or using a bastion host for SSH access, you can significantly reduce the attack surface and enhance the security of your infrastructure.